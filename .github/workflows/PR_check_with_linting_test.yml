name: PR Checks with Linting Tests and Unit Tests

on:
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check-readme:
    name: Check README.md for feature branches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check if branch is a feature branch
        id: check-branch
        run: |
          if [[ "${{ github.head_ref }}" == feature/* ]]; then
            echo "is_feature_branch=true" >> $GITHUB_ENV
          else
            echo "is_feature_branch=false" >> $GITHUB_ENV
          fi

      - name: Check if README.md is changed
        if: env.is_feature_branch == 'true'
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git diff --name-only origin/${{ github.base_ref }} | grep -q 'README.md'; then
            gh pr comment "$PR_URL" -b "You should update the README.md file for feature branches"
            exit 1
          fi

  lint-tests:
    name: PyLint Tests
    runs-on: ubuntu-latest
    needs: check-readme
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create venv
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install .[test]
        shell: bash

      - name: Analyzing the code with pylint
        id: pylint
        run: |
          . .venv/bin/activate
          pylint $(git ls-files '*.py') --max-line-length=120 --disable=E1101,E0611,E0401,E0633,R0801 --max-args=10 --max-locals=35 --max-attribute=15

      - name: Post PyLint results as PR comment
        if: failure()
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          . .venv/bin/activate
          pylint $(git ls-files '*.py') --max-line-length=120 --disable=E1101,E0611,E0401,E0633,R0801 --max-args=10 --max-locals=35 --max-attribute=15 | tee pylint-report.txt
          gh pr comment "$PR_URL" -b "$(cat pylint-report.txt)"
          exit 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: check-readme
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create venv
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install .[test]
        shell: bash

      - name: Run unit tests
        id: unittest
        run: |
          . .venv/bin/activate
          python -m unittest discover -s ./tests

      - name: Post Unit Test results as PR comment
        if: failure()
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          . .venv/bin/activate
          python -m unittest discover -s ./tests | tee unittest-report.txt
          gh pr comment "$PR_URL" -b "$(cat unittest-report.txt)"
          exit 1

  all-checks-passed:
    name: All Checks Passed
    if: always()
    needs: [lint-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Ensure all required jobs pass successfully
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  auto-merge:
    name: Auto-Merge Admin PR After All Checks Passed
    if: success()
    needs: all-checks-passed
    runs-on: ubuntu-latest
    steps:
      - name: Check permissions
        id: check-permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission)
          role=$(echo "$response" | jq -r '.role_name')
          if [[ "$role" == "admin" ]]; then
            echo "authorized=true" >> "$GITHUB_OUTPUT"
          else
            echo "authorized=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create github app token
        id: app-token
        if: steps.check-permissions.outputs.authorized == 'true'
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.AUTO_MERGE_BOT_APP_ID }}
          private-key: ${{ secrets.AUTO_MERGE_BOT_PRIVATE_KEY }}

      - name: Approve and squash the pull request
        if: steps.check-permissions.outputs.authorized == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PR_URL: ${{github.event.pull_request.html_url}}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr comment "$PR_URL" -b "Well done üëç"
          gh pr merge --admin -s "$PR_URL"
